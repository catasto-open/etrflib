# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dacsagb
else:
    import _dacsagb

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def dasag(ang):
    return _dacsagb.dasag(ang)

def dagas(ang):
    return _dacsagb.dagas(ang)

def dasar(ang):
    return _dacsagb.dasar(ang)

def dagar(ang):
    return _dacsagb.dagar(ang)

def daras(ang):
    return _dacsagb.daras(ang)

def darag(ang):
    return _dacsagb.darag(ang)

def dasdas(ang):
    return _dacsagb.dasdas(ang)

def dasasd(ang):
    return _dacsagb.dasasd(ang)

def angdir(xs, ys, xt, yt, dz, teta, cd, sd):
    return _dacsagb.angdir(xs, ys, xt, yt, dz, teta, cd, sd)

def adjang400(ang):
    return _dacsagb.adjang400(ang)
awgs84 = _dacsagb.awgs84
e2wgs84 = _dacsagb.e2wgs84
ahi = _dacsagb.ahi
bhi = _dacsagb.bhi
e2hi = _dacsagb.e2hi
i_u_s = _dacsagb.i_u_s
i_u_r = _dacsagb.i_u_r
i_u_c = _dacsagb.i_u_c
i_u_d = _dacsagb.i_u_d
class Geodesia(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def ang_conv(self, ang, un):
        return _dacsagb.Geodesia_ang_conv(self, ang, un)

    def fis(self, s, alfa, un=0):
        return _dacsagb.Geodesia_fis(self, s, alfa, un)

    def las(self, s, alfa, un=0):
        return _dacsagb.Geodesia_las(self, s, alfa, un)

    def fi_la(self, s, alfa, la, lo, un=0):
        return _dacsagb.Geodesia_fi_la(self, s, alfa, la, lo, un)

    def fi_la_step(self, s, alfa, la, lo, un=0):
        return _dacsagb.Geodesia_fi_la_step(self, s, alfa, la, lo, un)

    def s_alfa(self, fi0, la0, fi1, la1, s, az1, az2, un=0x00000001):
        return _dacsagb.Geodesia_s_alfa(self, fi0, la0, fi1, la1, s, az1, az2, un)

    def DaCSaGB(self, fi_orig, la_orig, n, e, arco_o, az1_bessel, az2_bessel, arco_e, az1_hayford, az2_hayford, lat_bessel, lon_bessel, lat_hayford, lon_hayford, un=0):
        return _dacsagb.Geodesia_DaCSaGB(self, fi_orig, la_orig, n, e, arco_o, az1_bessel, az2_bessel, arco_e, az1_hayford, az2_hayford, lat_bessel, lon_bessel, lat_hayford, lon_hayford, un)
    quota = property(_dacsagb.Geodesia_quota_get, _dacsagb.Geodesia_quota_set)
    ecc = property(_dacsagb.Geodesia_ecc_get, _dacsagb.Geodesia_ecc_set)
    semiasse = property(_dacsagb.Geodesia_semiasse_get, _dacsagb.Geodesia_semiasse_set)

    def SetAsse(self, x=6378388.0e0):
        return _dacsagb.Geodesia_SetAsse(self, x)

    def SetEcc(self, *args):
        return _dacsagb.Geodesia_SetEcc(self, *args)

    def SetEllWgs84(self):
        return _dacsagb.Geodesia_SetEllWgs84(self)

    def convFiLa_da_wgs84_a_h(self, f, l, q=0):
        return _dacsagb.Geodesia_convFiLa_da_wgs84_a_h(self, f, l, q)

    def convFiLa_da_h_a_wgs84(self, f, l, q=0):
        return _dacsagb.Geodesia_convFiLa_da_h_a_wgs84(self, f, l, q)

    def calcoladaXYZ(self, xx, yy, zz):
        return _dacsagb.Geodesia_calcoladaXYZ(self, xx, yy, zz)

    def __init__(self):
        _dacsagb.Geodesia_swiginit(self, _dacsagb.new_Geodesia())

    def calcola(self, un=0, fii=41.552551, lamd=12.270840, q=0.0e0):
        return _dacsagb.Geodesia_calcola(self, un, fii, lamd, q)

    def solvefi(self, x, y, z, f0):
        return _dacsagb.Geodesia_solvefi(self, x, y, z, f0)

    def xx(self):
        return _dacsagb.Geodesia_xx(self)

    def yy(self):
        return _dacsagb.Geodesia_yy(self)

    def zz(self):
        return _dacsagb.Geodesia_zz(self)

    def xxq(self):
        return _dacsagb.Geodesia_xxq(self)

    def yyq(self):
        return _dacsagb.Geodesia_yyq(self)

    def zzq(self):
        return _dacsagb.Geodesia_zzq(self)
    fi = property(_dacsagb.Geodesia_fi_get, _dacsagb.Geodesia_fi_set)
    _lambda = property(_dacsagb.Geodesia__lambda_get, _dacsagb.Geodesia__lambda_set)
    W = property(_dacsagb.Geodesia_W_get, _dacsagb.Geodesia_W_set)
    RG = property(_dacsagb.Geodesia_RG_get, _dacsagb.Geodesia_RG_set)
    GN = property(_dacsagb.Geodesia_GN_get, _dacsagb.Geodesia_GN_set)
    ro = property(_dacsagb.Geodesia_ro_get, _dacsagb.Geodesia_ro_set)
    r = property(_dacsagb.Geodesia_r_get, _dacsagb.Geodesia_r_set)
    x = property(_dacsagb.Geodesia_x_get, _dacsagb.Geodesia_x_set)
    y = property(_dacsagb.Geodesia_y_get, _dacsagb.Geodesia_y_set)
    z = property(_dacsagb.Geodesia_z_get, _dacsagb.Geodesia_z_set)
    xq = property(_dacsagb.Geodesia_xq_get, _dacsagb.Geodesia_xq_set)
    yq = property(_dacsagb.Geodesia_yq_get, _dacsagb.Geodesia_yq_set)
    zq = property(_dacsagb.Geodesia_zq_get, _dacsagb.Geodesia_zq_set)
    NordFE = property(_dacsagb.Geodesia_NordFE_get, _dacsagb.Geodesia_NordFE_set)
    EstFE = property(_dacsagb.Geodesia_EstFE_get, _dacsagb.Geodesia_EstFE_set)
    NordFO = property(_dacsagb.Geodesia_NordFO_get, _dacsagb.Geodesia_NordFO_set)
    EstFO = property(_dacsagb.Geodesia_EstFO_get, _dacsagb.Geodesia_EstFO_set)
    crid = property(_dacsagb.Geodesia_crid_get, _dacsagb.Geodesia_crid_set)

    def lfi(self):
        return _dacsagb.Geodesia_lfi(self)

    def NEgb(self, f, l, MM=True):
        return _dacsagb.Geodesia_NEgb(self, f, l, MM)

    def FiLagb(self, N, E, fi, la):
        return _dacsagb.Geodesia_FiLagb(self, N, E, fi, la)

    def DaCSaWgs84(self, n, e, q, xw, yw, zw):
        return _dacsagb.Geodesia_DaCSaWgs84(self, n, e, q, xw, yw, zw)

    def DaGBaWgs84(self, n, e, q, xw, yw, zw):
        return _dacsagb.Geodesia_DaGBaWgs84(self, n, e, q, xw, yw, zw)
    xcentrohay = property(_dacsagb.Geodesia_xcentrohay_get, _dacsagb.Geodesia_xcentrohay_set)
    ycentrohay = property(_dacsagb.Geodesia_ycentrohay_get, _dacsagb.Geodesia_ycentrohay_set)
    zcentrohay = property(_dacsagb.Geodesia_zcentrohay_get, _dacsagb.Geodesia_zcentrohay_set)

    def sec(self, x):
        return _dacsagb.Geodesia_sec(self, x)

    def cosec(self, x):
        return _dacsagb.Geodesia_cosec(self, x)

    def lat_geoc(self):
        return _dacsagb.Geodesia_lat_geoc(self)

    def lat_ridotta(self, lat):
        return _dacsagb.Geodesia_lat_ridotta(self, lat)
    __swig_destroy__ = _dacsagb.delete_Geodesia

# Register Geodesia in _dacsagb:
_dacsagb.Geodesia_swigregister(Geodesia)

dapianeapiane = _dacsagb.dapianeapiane
dapianeageogr = _dacsagb.dapianeageogr
dageograpiane = _dacsagb.dageograpiane
dageograagegr = _dacsagb.dageograagegr
daCSafila = _dacsagb.daCSafila
ddd_mm_ss = _dacsagb.ddd_mm_ss
ddd_dddd = _dacsagb.ddd_dddd
class dacsagb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EstCS = property(_dacsagb.dacsagb_EstCS_get, _dacsagb.dacsagb_EstCS_set)
    NordCS = property(_dacsagb.dacsagb_NordCS_get, _dacsagb.dacsagb_NordCS_set)
    fiCS = property(_dacsagb.dacsagb_fiCS_get, _dacsagb.dacsagb_fiCS_set)
    laCS = property(_dacsagb.dacsagb_laCS_get, _dacsagb.dacsagb_laCS_set)
    Est_festGB = property(_dacsagb.dacsagb_Est_festGB_get, _dacsagb.dacsagb_Est_festGB_set)
    Est_fovestGB = property(_dacsagb.dacsagb_Est_fovestGB_get, _dacsagb.dacsagb_Est_fovestGB_set)
    Nord_festGB = property(_dacsagb.dacsagb_Nord_festGB_get, _dacsagb.dacsagb_Nord_festGB_set)
    Nord_fovestGB = property(_dacsagb.dacsagb_Nord_fovestGB_get, _dacsagb.dacsagb_Nord_fovestGB_set)
    fiGB = property(_dacsagb.dacsagb_fiGB_get, _dacsagb.dacsagb_fiGB_set)
    laGB = property(_dacsagb.dacsagb_laGB_get, _dacsagb.dacsagb_laGB_set)
    messaggio = property(_dacsagb.dacsagb_messaggio_get, _dacsagb.dacsagb_messaggio_set)
    op = property(_dacsagb.dacsagb_op_get, _dacsagb.dacsagb_op_set)

    def __init__(self, *args):
        _dacsagb.dacsagb_swiginit(self, _dacsagb.new_dacsagb(*args))
    __swig_destroy__ = _dacsagb.delete_dacsagb

# Register dacsagb in _dacsagb:
_dacsagb.dacsagb_swigregister(dacsagb)

FUSO_OVEST = _dacsagb.FUSO_OVEST
FUSO_EST = _dacsagb.FUSO_EST

def DaPianeCSaFiLa(est, nord, la, fi, ms):
    return _dacsagb.DaPianeCSaFiLa(est, nord, la, fi, ms)

def calcolo(estCS, nordCS, laCS, fiCS, estGB, nordGB, laGB, fiGB):
    return _dacsagb.calcolo(estCS, nordCS, laCS, fiCS, estGB, nordGB, laGB, fiGB)

def est_nordCS_est_nordGB(estCS, nordCS, fuso_richiesto, estGB, nordGB):
    return _dacsagb.est_nordCS_est_nordGB(estCS, nordCS, fuso_richiesto, estGB, nordGB)

def la_fiCS_la_fiGB(laCS, fiCS, u, laGB, fiGB):
    return _dacsagb.la_fiCS_la_fiGB(laCS, fiCS, u, laGB, fiGB)

def la_fiCS_est_nordCS(laCS, fiCS, u, estCS, nordCS):
    return _dacsagb.la_fiCS_est_nordCS(laCS, fiCS, u, estCS, nordCS)

def la_fiGB_est_nordGB(laGB, fiGB, u, estGB, nordGB):
    return _dacsagb.la_fiGB_est_nordGB(laGB, fiGB, u, estGB, nordGB)

def est_nordCS_la_fiCS(estCS, nordCS, laCS, fiCS):
    return _dacsagb.est_nordCS_la_fiCS(estCS, nordCS, laCS, fiCS)

def est_nordGB_la_fiGB(estGB, nordGB, laGB, fiGB):
    return _dacsagb.est_nordGB_la_fiGB(estGB, nordGB, laGB, fiGB)


